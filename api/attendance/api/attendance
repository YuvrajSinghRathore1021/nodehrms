// const express = require('express');
// const router = express.Router();
// const db = require('../../DB/ConnectionSql');  // Importing the promise-based connection

// // API to get attendance for an employee
// router.get('/api/attendance', async (req, res) => {
//     const { data } = req.query;  // Extract data from the query params
//     const employeeId = 1;        // Set employeeId (can be dynamic in a real app)
//     let year = null;
//     let month = null;

//     // Validate and parse the year and month from query data
//     if (data) {
//         year = parseInt(data['Year'], 10) || null;
//         month = parseInt(data['Month'], 10) || null;
//     }

//     // Check if the required parameters are provided and valid
//     if (!employeeId || !month || !year || month < 1 || month > 12 || year < 1900 || year > new Date().getFullYear()) {
//         return res.status(400).json({ message: 'Invalid or missing parameters' });
//     }

//     try {
//         // Fetch employee details from the database
//         const [empResults] = await db.query('SELECT id, first_name, employee_id FROM employees WHERE id = ?', [employeeId]);
//         if (empResults.length === 0) {
//             return res.status(404).json({ message: 'Employee not found' });
//         }
//         const employee = empResults[0];

//         // Fetch attendance data for the given employee, year, and month
//         const [attendanceResults] = await db.query(`
//             SELECT status, check_in_time, check_out_time, attendance_date 
//             FROM attendance 
//             WHERE employee_id = ? AND YEAR(attendance_date) = ? AND MONTH(attendance_date) = ?`,
//             [employeeId, year, month]
//         );

//         // Fetch holiday data for the given month and year
//         const [holidayResults] = await db.query(`
//             SELECT date 
//             FROM holiday 
//             WHERE status = 1 AND YEAR(date) = ? AND MONTH(date) = ?`,
//             [year, month]
//         );

//         // Process the holiday data into a Set of ISO date strings
//         const holidays = new Set(
//             holidayResults.map(holiday => {
//                 // Convert the holiday.date to a JavaScript Date object
//                 const holidayDate = new Date(holiday.date);
//                 return holidayDate.toISOString().split('T')[0]; // Convert to ISO string (YYYY-MM-DD)
//             })
//         );
//         // Prepare the monthly attendance logs for each day of the month
//         const monthlyAttendanceLogs = [];
//         for (let dayNo = 1; dayNo <= 31; dayNo++) {
//             const date = new Date(year, month - 1, dayNo);
//             if (date.getMonth() !== month - 1) break; // Stop if we've exceeded the days in the month

//             // Find the attendance record for the current day
//             const attendance = attendanceResults.find(a => {
//                 const attDate = new Date(a.attendance_date);
//                 return attDate.getDate() === dayNo && attDate.getMonth() === month - 1;
//             });

//             // Check if it's a holiday
//             const isHoliday = holidays.has(date.toISOString().split('T')[0]);

//             // Build the daily attendance log
//             monthlyAttendanceLogs.push({
//                 day_no: dayNo,
//                 status: isHoliday ? 'H' : (attendance ? attendance.status : 'A'),
//                 in_time: attendance ? attendance.check_in_time : '',
//                 out_time: attendance ? attendance.check_out_time : ''
//             });
//         }

//         // Build the final response object
//         const response = {
//             emp_details: {
//                 name: employee.first_name,
//                 userId: employee.employee_id,
//                 Id: employee.id
//             },
//             monthly_attendance_logs: monthlyAttendanceLogs
//         };

//         // Send the response
//         res.json(response);

//     } catch (err) {
//         // Handle any errors during the process
//         console.error(err);
//         res.status(500).json({ message: 'An error occurred', error: err.message });
//     }
// });

// // Export the router
// module.exports = router;




















// HomeApi.js 

const express = require('express');
const router = express.Router();
const db = require('../../DB/ConnectionSql');


// Helper function to calculate time difference in HH:MM format
const calculateTimeDifference = (startTime, endTime) => {
    const [startHours, startMinutes] = startTime.split(':').map(Number);
    const [endHours, endMinutes] = endTime.split(':').map(Number);
    let NewstartHours = startHours - 1;
    let diffHours = endHours - NewstartHours;
    let diffMinutes = endMinutes - startMinutes;

    if (diffMinutes < 0) {
        diffMinutes += 60;
        diffHours -= 1;
    }
    return `${String(diffHours).padStart(2, '0')}:${String(diffMinutes).padStart(2, '0')}`;
};

function trackTime(officeStartTime, arrivalTimeOrCloseTime) {
    // Convert time strings to Date objects for easier comparison
    const [officeHours, officeMinutes] = officeStartTime.split(':').map(Number);
    const [arrivalHours, arrivalMinutes] = arrivalTimeOrCloseTime.split(':').map(Number);

    // Create Date objects for office start and arrival/close times
    const officeStart = new Date();
    officeStart.setHours(officeHours, officeMinutes, 0, 0);  // Set office start time

    const arrivalOrClose = new Date();
    arrivalOrClose.setHours(arrivalHours, arrivalMinutes, 0, 0);  // Set arrival or close time

    // Calculate the difference in milliseconds
    const timeDifferenceMs = arrivalOrClose - officeStart;

    // If timeDifferenceMs is negative, you are early, otherwise you're late
    const isLate = timeDifferenceMs > 0;

    // Convert milliseconds to hours and minutes
    const absTimeDifference = Math.abs(timeDifferenceMs);
    const hours = Math.floor(absTimeDifference / 3600000);
    const minutes = Math.floor((absTimeDifference % 3600000) / 60000);

    // Format the time difference
    const formattedTime = `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`;

    // Return the result
    if (isLate) {
        return formattedTime;
        // return `You are late by ${formattedTime}`;
    } else {
        return formattedTime;
        // return `You are early by ${formattedTime}`;
    }
}



// Helper function to calculate the duration between check-in and check-out times
const calculateDuration = (checkInTime, checkOutTime) => {
    const checkIn = new Date(`1970-01-01T${checkInTime}`);
    const checkOut = new Date(`1970-01-01T${checkOutTime}`);
    const durationMillis = checkOut - checkIn;
    const totalMinutes = Math.floor(durationMillis / 60000);
    const hours = Math.floor(totalMinutes / 60);
    const minutes = totalMinutes % 60;
    return `${hours} hour ${minutes} minute`;
};

// Helper function to query the database with Promise
const queryDb = (query, params) => {
    return new Promise((resolve, reject) => {
        db.query(query, params, (err, results) => {
            if (err) return reject(err);
            resolve(results);
        });
    });
};

// Route handler for marking attendance
router.post('/Attendancemark', async (req, res) => {
    const { type, userData } = req.body;
    const currentDate = new Date();
    const formattedTime = `${String(currentDate.getHours()).padStart(2, '0')}:${String(currentDate.getMinutes()).padStart(2, '0')}:${String(currentDate.getSeconds()).padStart(2, '0')}`;

    // Decode and validate user data
    let decodedUserData = null;
    if (userData) {
        try {
            const decodedString = Buffer.from(userData, 'base64').toString('utf-8');
            decodedUserData = JSON.parse(decodedString);
        } catch (error) {
            return res.status(400).json({ status: false, error: 'Invalid userData' });
        }
    }

    if (!decodedUserData || !decodedUserData.company_id || !decodedUserData.id || !type) {
        return res.status(400).json({ status: false, error: 'company_id, id, and type are required' });
    }

    try {
        // Fetch employee's attendance rules
        const employeeResults = await queryDb('SELECT attendance_rules_id FROM employees WHERE id = ? AND company_id = ?', [decodedUserData.id, decodedUserData.company_id]);
        if (employeeResults.length === 0) {
            return res.status(500).json({ status: false, message: 'Employee not found' });
        }
        const CompanyiPResults = await queryDb('SELECT ip FROM companies WHERE id = ?', [decodedUserData.company_id]);
        if (CompanyiPResults.length === 0) {
            return res.status(403).json({ status: false, message: 'Some error Pls Login' });
        } else {
            // const clientIp = req.headers['x-forwarded-for'] || req.connection.remoteAddress || req.socket.remoteAddress;
            const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
            // console.log('Client IP:', ip);
            // console.log('Client IP:', clientIp);
        }

        const rulesResults = await queryDb('SELECT * FROM attendance_rules WHERE rule_id = ? AND company_id = ?', [employeeResults[0].attendance_rules_id, decodedUserData.company_id]);

        const rule = rulesResults.length > 0 ? rulesResults[0] : { in_time: '09:30', out_time: '18:30' };
        let dailyStatus = '';
        let timeCount = '';

        if (type === 'in') {
            // const inTimeFormatted = `${String(rule.in_time).padStart(5, '0')}`;
            const inTimeFormatted = rule.in_time ? `${String(rule.in_time).padStart(5, '0')}` : `${String('09:30').padStart(5, '0')}`;

            // Check if employee is early, late, or on time
            if (inTimeFormatted > formattedTime) {
                dailyStatus = 'Early';
                // timeCount = calculateTimeDifference(inTimeFormatted, formattedTime);
                timeCount = trackTime(inTimeFormatted, formattedTime);
            } else if (inTimeFormatted < formattedTime) {
                dailyStatus = 'Late';
                // timeCount = calculateTimeDifference(formattedTime, inTimeFormatted);
                timeCount = trackTime(inTimeFormatted, formattedTime);
            } else {
                dailyStatus = 'On Time';
                timeCount = '00:00';
            }

            // Check if attendance has already been marked today
            const attendanceResults = await queryDb('SELECT * FROM attendance WHERE employee_id = ? AND company_id = ? AND attendance_date = CURDATE()', [decodedUserData.id, decodedUserData.company_id]);
            if (attendanceResults.length > 0) {
                return res.status(400).json({ status: false, message: 'Attendance for today is already marked as in.' });
            }

            // Insert check-in record
            await queryDb('INSERT INTO attendance (daily_status_in, daily_status_intime, employee_id, company_id, attendance_date, check_in_time) VALUES (?, ?, ?, ?, CURDATE(), ?)',
                [dailyStatus, timeCount, decodedUserData.id, decodedUserData.company_id, formattedTime]);

            return res.status(200).json({ status: true, message: `Attendance marked as 'in' at ${formattedTime}.` });

        } else if (type === 'out') {
            // Check if check-in exists for today
            const checkInResults = await queryDb('SELECT check_in_time FROM attendance WHERE employee_id = ? AND company_id = ? AND attendance_date = CURDATE()', [decodedUserData.id, decodedUserData.company_id]);
            if (checkInResults.length === 0) {
                return res.status(400).json({ status: false, message: 'No check-in found for today. Please check in first.' });
            }

            const checkInTime = checkInResults[0].check_in_time;

            const duration = calculateDuration(checkInTime, formattedTime);

            // Calculate check-out status
            // const outTimeFormatted = `${String(rule.out_time).padStart(5, '0')}`;
            const outTimeFormatted = rule.out_time ? `${String(rule.out_time).padStart(5, '0')}` : `${String('18:30').padStart(5, '0')}`;
            if (outTimeFormatted > formattedTime) {
                dailyStatus = 'Early';
                timeCount = trackTime(outTimeFormatted, formattedTime);
            } else if (outTimeFormatted < formattedTime) {
                dailyStatus = 'Late';
                timeCount = trackTime(outTimeFormatted, formattedTime);
            } else {
                dailyStatus = 'On Time';
                timeCount = '00:00';
            }

            // Update attendance with check-out time and duration
            await queryDb('UPDATE attendance SET daily_status_out=?, daily_status_outtime=?, check_out_time = ?, duration = ? WHERE employee_id = ? AND company_id = ? AND attendance_date = CURDATE()',
                [dailyStatus, timeCount, formattedTime, duration, decodedUserData.id, decodedUserData.company_id]);

            return res.status(200).json({ status: true, message: `Attendance marked as 'out' at ${formattedTime}. Duration: ${duration}.` });
        } else {
            return res.status(400).json({ status: false, message: 'Invalid attendance type. Use "in" or "out".' });
        }
    } catch (err) {
        console.error(err);
        return res.status(500).json({ status: false, message: 'Internal server error.', error: err });
    }
});



router.post('/AttendanceGet', (req, res) => {

    const { userData } = req.body;
    if (!userData || !userData.id) {
        return res.status(400).json({
            status: false,
            message: 'User data is required.'
        });
    }

    db.query('SELECT check_in_time,created,check_out_time,duration FROM attendance WHERE employee_id = ? AND attendance_date = CURDATE()',
        [userData.id],
        (err, results) => {
            if (err) {
                return res.status(500).json({
                    status: false,
                    message: 'Database error.',
                    error: err
                });
            }
            // If no entry exists for today
            if (results.length === 0) {
                return res.status(200).json({
                    status: false,
                    message: 'No check-in record found for today.'
                });
            }

            // If entry exists, return the check-in time

            const checkInTime = results[0].created;
            const check_out_time = results[0].check_out_time;
            const duration = results[0].duration;

            return res.status(200).json({
                status: true,
                message: 'Check-in time retrieved successfully.',
                InTime: checkInTime,
                check_out_time: check_out_time,
                duration: duration,
            });
        });
});

// router.get('/api/data', (req, res) => {
//     const { userData, data } = req.query;
// let startDate = null;
// let endDate = null;
// let UserId = null;

// if (data) {
//     startDate = data['startDate'] ? new Date(data['startDate']) : null;
//     endDate = data['endDate'] ? new Date(data['endDate']) : null;
//     UserId = data['UserId'] ? data['UserId'] : null;
// }

//     let decodedUserData = null;
//     if (userData) {
//         try {
//             const decodedString = Buffer.from(userData, 'base64').toString('utf-8');
//             decodedUserData = JSON.parse(decodedString);
//         } catch (error) {
//             return res.status(400).json({ status: false, error: 'Invalid userData' });
//         }
//     }

//     const limit = parseInt(req.query.limit, 10) || 10;
//     const page = parseInt(req.query.page, 10) || 1;
//     const offset = (page - 1) * limit;

//     // Ensure employee_id is present
//     if (!decodedUserData || !decodedUserData.id) {
//         return res.status(400).json({ status: false, error: 'Employee ID is required' });
//     }
//     let EmployeeId = '';
//     if (UserId) {
//         EmployeeId = UserId;
//     } else {
//         EmployeeId = decodedUserData.id;
//     }

//     // Build the base query
//     let query = `
//         SELECT a.attendance_id, a.status, a.check_in_time, a.check_out_time, a.duration, a.created,
//                CONCAT(b.first_name, " - ", b.employee_id) AS name
//         FROM attendance a
//         INNER JOIN employees b ON a.employee_id = b.id
//         WHERE a.employee_id = ?`;

//     // Add conditions for date filtering if startDate and endDate are provided
// if (startDate && endDate) {
//     query += ' AND a.attendance_date BETWEEN ? AND ?';
// } else if (startDate) {
//     query += ' AND a.attendance_date >= ?';
// } else if (endDate) {
//     query += ' AND a.attendance_date <= ?';
// }

//     query += ' LIMIT ? OFFSET ?';

//     // Set query parameters
//     const queryParams = [EmployeeId];
//     if (startDate && endDate) {
//         queryParams.push(startDate.toISOString(), endDate.toISOString());
//     } else if (startDate) {
//         queryParams.push(startDate.toISOString());
//     } else if (endDate) {
//         queryParams.push(endDate.toISOString());
//     }
//     queryParams.push(limit, offset);

//     db.query(query, queryParams, (err, results) => {
//         if (err) {
//             console.error('Error fetching attendance records:', err);
//             return res.status(500).json({ status: false, error: 'Server error' });
//         }

//         // Count total records for pagination, including filters
//         let countQuery = 'SELECT COUNT(attendance_id) AS total FROM attendance WHERE employee_id = ?';
//         let countQueryParams = [EmployeeId];

//         // Apply the same date filters for the total count query
//         if (startDate && endDate) {
//             countQuery += ' AND attendance_date BETWEEN ? AND ?';
//             countQueryParams.push(startDate.toISOString(), endDate.toISOString());
//         } else if (startDate) {
//             countQuery += ' AND attendance_date >= ?';
//             countQueryParams.push(startDate.toISOString());
//         } else if (endDate) {
//             countQuery += ' AND attendance_date <= ?';
//             countQueryParams.push(endDate.toISOString());
//         }

//         db.query(countQuery, countQueryParams, (err, countResults) => {
//             if (err) {
//                 console.error('Error counting attendance records:', err);
//                 return res.status(500).json({ status: false, error: 'Server error' });
//             }

//             const total = countResults[0].total;
//             res.json({
//                 status: true,
//                 attendance: results,
//                 total,
//                 page,
//                 limit
//             });
//         });
//     });
// });

// GET value for admin 

router.get('/api/Attendancedirectory', (req, res) => {
    const { userData, data } = req.query;
    let SearchDate = null;
    if (data && data.Date) {
        SearchDate = data.Date ? new Date(data.Date) : null;
    }
    let decodedUserData = null;
    if (userData) {
        try {
            const decodedString = Buffer.from(userData, 'base64').toString('utf-8');
            decodedUserData = JSON.parse(decodedString);
        } catch (error) {
            return res.status(400).json({ status: false, error: 'Invalid userData format' });
        }
    }
    if (!decodedUserData || !decodedUserData.id || !decodedUserData.company_id) {
        return res.status(400).json({ status: false, error: 'Employee ID and Company ID are required' });
    }
    const limit = parseInt(req.query.limit, 10) || 10;
    const page = parseInt(req.query.page, 10) || 1;
    const offset = (page - 1) * limit;
    let query = `SELECT b.id,
                b.first_name,a.employee_id, a.attendance_date, a.status, 
               a.daily_status_in, a.daily_status_out, 
               a.daily_status_intime, a.daily_status_outtime, 
               a.check_in_time, a.check_out_time, a.duration
        FROM employees AS b
        LEFT JOIN attendance AS a ON a.employee_id = b.id
        WHERE b.company_id = ?`;
    const queryParams = [decodedUserData.company_id];
    if (SearchDate) {
        // query += ' AND a.attendance_date = ?';
        query += ' AND (a.attendance_date = ? OR a.attendance_date IS NULL)';
        queryParams.push(SearchDate.toISOString());
    }
    query += ' LIMIT ? OFFSET ? ';
    queryParams.push(limit, offset);
    db.query(query, queryParams, (err, results) => {
        if (err) {
            console.error('Error fetching attendance records:', err);
            return res.status(500).json({ status: false, error: 'Server error fetching attendance records' });
        }
        let countQuery = `
            SELECT COUNT(a.employee_id) AS total
            FROM attendance AS a
            INNER JOIN employees AS b ON a.employee_id = b.id
            WHERE a.company_id = ?
        `;
        let countQueryData = [decodedUserData.company_id];
        if (SearchDate) {
            countQuery += ' AND (a.attendance_date = ? OR a.attendance_date IS NULL)';
            countQueryData.push(SearchDate.toISOString());
        }
        db.query(countQuery, countQueryData, (err, countResults) => {
            if (err) {
                console.error('Error counting attendance records:', err);
                return res.status(500).json({ status: false, error: 'Server error counting attendance records' });
            }
            const total = countResults[0].total;
            const employeesWithSrnu = results.map((attendance, index) => ({
                srnu: offset + index + 1,
                ...attendance
            }));
            res.json({
                status: true,
                Attendanceemployees: employeesWithSrnu,
                total,
                page,
                limit
            });
        });
    });
});




const decodeUserData = (userData) => {
    try {
        const decodedString = Buffer.from(userData, 'base64').toString('utf-8');
        return JSON.parse(decodedString);
    } catch (error) {
        return null;
    }
};

// Helper function to check if a date is in the past or today
const isDateBeforeOrEqualToday = (date) => {
    const today = new Date();
    const inputDate = new Date(date);
    return inputDate <= today;
};

// Helper function to check if start date is before or equal to end date
const isStartDateBeforeOrEqualEndDate = (startDate, endDate) => {
    return new Date(startDate) <= new Date(endDate);
};

// Helper function to check if the difference between dates is within 31 days
const isDateRangeValid = (startDate, endDate) => {
    const diffTime = new Date(endDate) - new Date(startDate);
    return diffTime <= 31 * 24 * 60 * 60 * 1000; // 31 days in milliseconds
};

// Endpoint to get attendance data for a specific date range and user
// router.get('/api/data', async (req, res) => {
//     const { userData, data } = req.query;

//     let startDate = null;
//     let endDate = null;
//     let UserId = null;

//     if (data) {
//         startDate = data['startDate'] ? new Date(data['startDate']) : null;
//         endDate = data['endDate'] ? new Date(data['endDate']) : null;
//         UserId = data['UserId'] ? data['UserId'] : null;
//     }

//     let decodedUserData = null;
//     if (userData) {
//         decodedUserData = decodeUserData(userData);
//         if (!decodedUserData) {
//             return res.status(400).json({ status: false, message: 'Invalid userData', error: 'Invalid userData' });
//         }
//     }
//     const limit = parseInt(req.query.limit, 10) || 10;
//     const page = parseInt(req.query.page, 10) || 1;

//     if (!decodedUserData || !decodedUserData.id) {
//         return res.status(400).json({ status: false, message: 'Employee ID is required', error: 'Employee ID is required' });
//     }
//     const EmployeeId = UserId || decodedUserData.id;
//     if (!startDate || !endDate) {
//         return res.status(400).json({ status: false, message: 'Both startDate and endDate are required', error: 'Both startDate and endDate are required' });
//     }
//     if (!isDateBeforeOrEqualToday(endDate)) {
//         return res.status(400).json({ status: false, message: 'End date cannot be greater than today.' });
//     }
//     if (!isStartDateBeforeOrEqualEndDate(startDate, endDate)) {
//         return res.status(400).json({ status: false, message: 'Start date must be before or equal to end date.' });
//     }
//     if (!isDateRangeValid(startDate, endDate)) {
//         return res.status(400).json({ status: false, message: 'The date range cannot exceed 31 days.' });
//     }

//     const dates = [];
//     let currentDate = new Date(startDate);
//     const end = new Date(endDate);

//     while (currentDate <= end) {
//         dates.push(currentDate.toISOString().split('T')[0]);
//         currentDate.setDate(currentDate.getDate() + 1);
//     }
//     const allData = [];
//     try {
//         for (let date of dates) {

//             const results = await new Promise((resolve, reject) => {
//                 db.query('SELECT b.id, CONCAT(b.first_name, " - ", b.employee_id) AS name, a.attendance_id, a.status, a.check_in_time, a.check_out_time, a.duration, a.created, a.attendance_date FROM employees b LEFT JOIN attendance a ON a.employee_id = b.id WHERE b.company_id = ? And b.id=? AND (a.attendance_date = ? OR a.attendance_date IS NULL)',
//                     [decodedUserData.company_id, EmployeeId, date],
//                     (err, results) => {
//                         if (err) {
//                             reject(err);
//                         } else {
//                             resolve(results);
//                         }
//                     }
//                 );
//             });

//             // Process each result
//             if (results.length > 0) {
//                 const record = results[0];
//                 if (record.attendance_date === null) {
//                     allData.push({
//                         id: record.id,
//                         name: record.name,
//                         attendance_id: '0',
//                         status: 'Apsant',
//                         check_in_time: '00:00',
//                         check_out_time: '00:00',
//                         duration: '00:0',
//                         created: date,
//                     });
//                 } else {
//                     allData.push(record);
//                 }
//             } else {
//                 allData.push({
//                     id: null,
//                     name: 'No Data Available',
//                     attendance_id: '',
//                     status: 'No Attendance',
//                     check_in_time: '',
//                     check_out_time: '',
//                     duration: '',
//                     created: '',
//                 });
//             }
//         }

//         return res.status(200).json({
//             status: true,
//             message: 'Data Found',
//             attendance: allData,
//             total: allData.length,
//         });

//     } catch (err) {
//         return res.status(500).json({
//             status: false,
//             message: 'Database error occurred while fetching attendance details',
//             error: err.message || err,
//         });
//     }
// });



router.get('/api/data', async (req, res) => {
    try {
        const { userData, data } = req.query;
        let { startDate, endDate, UserId } = data || {};
        const limit = parseInt(req.query.limit, 10) || 10;
        const page = parseInt(req.query.page, 10) || 1;

        // Step 1: Decode user data
        let decodedUserData = null;
        if (userData) {
            decodedUserData = decodeUserData(userData);
            if (!decodedUserData) {
                return res.status(400).json({ status: false, message: 'Invalid userData', error: 'Invalid userData' });
            }
        }

        if (!decodedUserData || !decodedUserData.id) {
            return res.status(400).json({ status: false, message: 'Employee ID is required', error: 'Employee ID is required' });
        }

        const EmployeeId = UserId || decodedUserData.id;

        // Step 2: Validate date range
        startDate = startDate ? new Date(startDate) : new Date();
        endDate = endDate ? new Date(endDate) : new Date();

        // startDate = startDate ? new Date(startDate) : null;
        // endDate = endDate ? new Date(endDate) : null;

        if (!startDate || !endDate) {
            return res.status(400).json({ status: false, message: 'Both startDate and endDate are required', error: 'Both startDate and endDate are required' });
        }

        if (!isDateBeforeOrEqualToday(endDate)) {
            return res.status(400).json({ status: false, message: 'End date cannot be greater than today.' });
        }

        if (!isStartDateBeforeOrEqualEndDate(startDate, endDate)) {
            return res.status(400).json({ status: false, message: 'Start date must be before or equal to end date.' });
        }

        if (!isDateRangeValid(startDate, endDate)) {
            return res.status(400).json({ status: false, message: 'The date range cannot exceed 31 days.' });
        }

        // Step 3: Generate list of dates for the range
        const dates = [];
        let currentDate = new Date(startDate);
        const end = new Date(endDate);
        while (currentDate <= end) {
            dates.push(currentDate.toISOString().split('T')[0]);
            currentDate.setDate(currentDate.getDate() + 1);
        }

        // Step 4: Pagination logic
        const startIndex = (page - 1) * limit;
        const endIndex = startIndex + limit;
        const paginatedDates = dates.slice(startIndex, endIndex);

        // Step 5: Fetch attendance data for each date
        const allData = [];
        for (let date of paginatedDates) {
            let record = await getAttendanceData(decodedUserData.company_id, EmployeeId, date);

            if (record.length > 0) {
                const attendanceRecord = record[0];
                if (!attendanceRecord.attendance_date) {
                    const holiday = await checkHoliday(decodedUserData.company_id, date);
                    const status = holiday.length > 0 ? `Holiday-${holiday[0].holiday}` : 'Absent';
                    allData.push(createAttendanceResponse(attendanceRecord, status, date));
                } else {
                    allData.push(attendanceRecord);
                }
            } else {
                const employeeInfo = await getEmployeeInfo(decodedUserData.company_id, EmployeeId);
                const holiday = await checkHoliday(decodedUserData.company_id, date);
                const status = holiday.length > 0 ? `Holiday-${holiday[0].holiday}` : 'Absent';
                allData.push(createAttendanceResponse(employeeInfo[0], status, date));
            }
        }

        return res.status(200).json({
            status: true,
            message: 'Data Found',
            attendance: allData,
            total: dates.length,
            page,
            limit
        });
    } catch (err) {
        return res.status(500).json({
            status: false,
            message: 'Database error occurred while fetching attendance details',
            error: err.message || err
        });
    }
});

// Helper functions
const getAttendanceData = (companyId, employeeId, date) => {
    return new Promise((resolve, reject) => {
        db.query('SELECT b.id, CONCAT(b.first_name, " - ", b.employee_id) AS name, a.attendance_id, a.status, a.check_in_time, a.check_out_time, a.duration, a.created, a.attendance_date FROM employees b LEFT JOIN attendance a ON a.employee_id = b.id WHERE b.company_id = ? AND b.id = ? AND (a.attendance_date = ? OR a.attendance_date IS NULL)',
            [companyId, employeeId, date], (err, results) => {
                if (err) reject(err);
                resolve(results);
            });
    });
};

const checkHoliday = (companyId, date) => {
    return new Promise((resolve, reject) => {
        db.query('SELECT date, holiday FROM holiday WHERE status = 1 AND company_id = ? AND date = ?',
            [companyId, date], (err, results) => {
                if (err) reject(err);
                resolve(results);
            });
    });
};

const getEmployeeInfo = (companyId, employeeId) => {
    return new Promise((resolve, reject) => {
        db.query('SELECT b.id, CONCAT(b.first_name, " - ", b.employee_id) AS name FROM employees b WHERE b.company_id = ? AND b.id = ?',
            [companyId, employeeId], (err, results) => {
                if (err) reject(err);
                resolve(results);
            });
    });
};

const createAttendanceResponse = (record, status, date) => {
    return {
        id: record.id,
        name: record.name,
        attendance_id: '0',
        status,
        check_in_time: '00:00',
        check_out_time: '00:00',
        duration: '00:00',
        created: date
    };
};




// AttendanceCalendar api 

// router.get('/api/attendance', async (req, res) => {
//     const { data } = req.query;  // Extract data from the query params
//     const employeeId = 1;        // Set employeeId (can be dynamic in a real app)
//     let year = null;
//     let month = null;

//     // Validate and parse the year and month from query data
//     if (data) {
//         year = parseInt(data['Year'], 10) || null;
//         month = parseInt(data['Month'], 10) || null;
//     }

//     // Check if the required parameters are provided and valid
//     if (!employeeId || !month || !year || month < 1 || month > 12 || year < 1900 || year > new Date().getFullYear()) {
//         return res.status(400).json({ message: 'Invalid or missing parameters' });
//     }

//     try {
//         // Fetch employee details from the database
//         const [empResults] = await db.query('SELECT id, first_name, employee_id FROM employees WHERE id = ?', [employeeId]);
//         if (empResults.length === 0) {
//             return res.status(404).json({ message: 'Employee not found' });
//         }
//         const employee = empResults[0];

//         // Fetch attendance data for the given employee, year, and month
//         const [attendanceResults] = await db.query(`
//             SELECT status, check_in_time, check_out_time, attendance_date 
//             FROM attendance 
//             WHERE employee_id = ? AND YEAR(attendance_date) = ? AND MONTH(attendance_date) = ?`,
//             [employeeId, year, month]
//         );

//         // Fetch holiday data for the given month and year
//         const [holidayResults] = await db.query(`
//             SELECT date 
//             FROM holiday 
//             WHERE status = 1 AND YEAR(date) = ? AND MONTH(date) = ?`,
//             [year, month]
//         );

//         // Process the holiday data into a Set of ISO date strings
//         const holidays = new Set(
//             holidayResults.map(holiday => {
//                 // Convert the holiday.date to a JavaScript Date object
//                 const holidayDate = new Date(holiday.date);
//                 return holidayDate.toISOString().split('T')[0]; // Convert to ISO string (YYYY-MM-DD)
//             })
//         );
//         // Prepare the monthly attendance logs for each day of the month
//         const monthlyAttendanceLogs = [];
//         for (let dayNo = 1; dayNo <= 31; dayNo++) {
//             const date = new Date(year, month - 1, dayNo);
//             if (date.getMonth() !== month - 1) break; // Stop if we've exceeded the days in the month

//             // Find the attendance record for the current day
//             const attendance = attendanceResults.find(a => {
//                 const attDate = new Date(a.attendance_date);
//                 return attDate.getDate() === dayNo && attDate.getMonth() === month - 1;
//             });

//             // Check if it's a holiday
//             const isHoliday = holidays.has(date.toISOString().split('T')[0]);

//             // Build the daily attendance log
//             monthlyAttendanceLogs.push({
//                 day_no: dayNo,
//                 status: isHoliday ? 'H' : (attendance ? attendance.status : 'A'),
//                 in_time: attendance ? attendance.check_in_time : '',
//                 out_time: attendance ? attendance.check_out_time : ''
//             });
//         }

//         // Build the final response object
//         const response = {
//             emp_details: {
//                 name: employee.first_name,
//                 userId: employee.employee_id,
//                 Id: employee.id
//             },
//             monthly_attendance_logs: monthlyAttendanceLogs
//         };

//         // Send the response
//         res.json(response);

//     } catch (err) {
//         // Handle any errors during the process
//         console.error(err);
//         res.status(500).json({ message: 'An error occurred', error: err.message });
//     }
// });




// router.get('/api/attendance', async (req, res) => {
//     const { data } = req.query;
//     const employeeId = '1,2,3';
//     let year = null;
//     let month = null;

//     if (data) {
//         year = parseInt(data['Year'], 10) || null;
//         month = parseInt(data['Month'], 10) || null;
//     }

//     if (!employeeId || !month || !year || month < 1 || month > 12 || year < 1900 || year > new Date().getFullYear()) {
//         return res.status(400).json({ message: 'Invalid or missing parameters' });
//     }
//     try {
//         const [empResults] = await db.promise().query('SELECT id, first_name, employee_id FROM employees WHERE id IN (?)', [employeeId]);
//         if (empResults.length === 0) {
//             return res.status(404).json({ message: 'Employee not found' });
//         }
//         const employee = empResults[0];
//         const [attendanceResults] = await db.promise().query(`
//             SELECT status, check_in_time, check_out_time, attendance_date 
//             FROM attendance 
//             WHERE employee_id = ? AND YEAR(attendance_date) = ? AND MONTH(attendance_date) = ?`,
//             [employee['id'], year, month]
//         );

//         const [holidayResults] = await db.promise().query(`
//             SELECT date 
//             FROM holiday 
//             WHERE status = 1 AND YEAR(date) = ? AND MONTH(date) = ?`,
//             [year, month]
//         );

//         const holidays = new Set(holidayResults.map(holiday => new Date(holiday.date).toISOString().split('T')[0]));

//         const monthlyAttendanceLogs = [];
//         for (let dayNo = 1; dayNo <= 31; dayNo++) {
//             const date = new Date(year, month - 1, dayNo);
//             if (date.getMonth() !== month - 1) break;

//             const attendance = attendanceResults.find(a => {
//                 const attDate = new Date(a.attendance_date);
//                 return attDate.getDate() === dayNo && attDate.getMonth() === month - 1;
//             });
//             const isHoliday = holidays.has(date.toISOString().split('T')[0]);
//             monthlyAttendanceLogs.push({
//                 day_no: dayNo,
//                 status: isHoliday ? 'H' : (attendance ? attendance.status : 'A'),
//                 in_time: attendance ? attendance.check_in_time : '',
//                 out_time: attendance ? attendance.check_out_time : ''
//             });
//         }

//         // Build the response object
//         const response = {
//             emp_details: {
//                 name: employee.first_name,
//                 userId: employee.employee_id,
//                 Id: employee.id
//             },
//             monthly_attendance_logs: monthlyAttendanceLogs
//         };
//         // Send the response
//         res.json(response);

//     } catch (err) {
//         console.error('Error occurred:', err);
//         res.status(500).json({ message: 'An error occurred while fetching attendance data', error: err.message });
//     }
// });


const getMonthDates = (year, month) => {
    const dates = [];

    // Loop through the days of the target month
    for (let dayNo = 1; dayNo <= 31; dayNo++) {
        const date = new Date(year, month - 1, dayNo);

        // Stop the loop if the day is not in the target month
        if (date.getFullYear() !== year || date.getMonth() !== month - 1) break;

        dates.push(date.toISOString().split("T")[0]); // Add formatted date (YYYY-MM-DD)
    }

    return dates;
}
const generateDataForMonth = (month, year) => {
    // Get the number of days in the month
    const daysInMonth = new Date(year, month, 0).getDate();

    // Generate data for each day
    const data = [];
    for (let day = 1; day <= daysInMonth; day++) {
        const date = new Date(year, month - 1, day); // month is 0-based

        // Format the date as YYYY-MM-DD
        const formattedDate = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;

        data.push({
            day: `Day ${day}`,
            date: formattedDate,
        });
    }
    return data;
};
// Example usage


router.get('/api/attendance', async (req, res) => {


    const { data, userData } = req.query;
    const employeeIds = '1,2,3,4';
    let year = null;
    let month = null;
    let searchData = null;
    let decodedUserData = null;

    if (userData) {
        decodedUserData = decodeUserData(userData);
        if (!decodedUserData) {
            return res.status(200).json({ status: false, message: 'Invalid userData', error: 'Invalid userData' });
        }
    }
    if (!decodedUserData || !decodedUserData.id || !decodedUserData.company_id) {
        return res.status(400).json({ status: false, message: 'Employee ID is required', error: 'Employee ID is required' });
    }

    if (data) {
        year = parseInt(data['Year'], 10) || null;
        month = parseInt(data['Month'], 10) || null;
        searchData = data['searchData'] || null;
    }

    if (!employeeIds || !month || !year || month < 1 || month > 12 || year < 1900 || year > new Date().getFullYear()) {
        return res.status(200).json({status: false, message: 'Invalid or missing parameters' });
    }

    const employeeIdsArray = employeeIds.split(',').map(id => parseInt(id, 10)).filter(id => !isNaN(id));

    if (employeeIdsArray.length === 0) {
        return res.status(200).json({status: false, message: 'Invalid employee IDs' });
    }

    try {
        // Fetch employee details for the given IDs
        let empsql = `SELECT id, first_name, employee_id FROM employees WHERE company_id=?`;

        let EmpArrayValue = [decodedUserData.company_id];

        // Check if searchData is provided (this assumes it's a string)
        if (searchData) {
            // Add the condition for 'first_name' to the query
            empsql += ` AND first_name LIKE ?`;
            EmpArrayValue.push(`%${searchData}%`);
        }

        const [empResults] = await db.promise().query(empsql, EmpArrayValue);

        // const [empResults] = await db.promise().query(
        //     'SELECT id, first_name, employee_id FROM employees WHERE id IN (?)',
        //     [employeeIdsArray]
        // );

        if (empResults.length === 0) {
            return res.status(200).json({status: false, message: 'Employees not found' });
        }

        const [holidayResults] = await db.promise().query(`
            SELECT date
            FROM holiday
            WHERE status = 1 AND YEAR(date) = ? AND MONTH(date) = ?`,
            [year, month]
        );
        const holidays = new Set(holidayResults.map(holiday => new Date(holiday.date).toISOString().split('T')[0]));
        const employeesAttendanceData = [];

        for (const employee of empResults) {
            const [attendanceResults] = await db.promise().query(`
                SELECT status, check_in_time, check_out_time, attendance_date
                FROM attendance
                WHERE employee_id = ? AND YEAR(attendance_date) = ? AND MONTH(attendance_date) = ?`,
                [employee.id, year, month]
            );
            const monthlyAttendanceLogs = [];
            const daysInMonth = new Date(year, month, 0).getDate();
            for (let dayNo = 1; dayNo <= daysInMonth; dayNo++) {
                const dateValue = new Date(year, month - 1, dayNo);
                const date1 = `${dateValue.getFullYear()}-${String(dateValue.getMonth() + 1).padStart(2, '0')}-${String(dateValue.getDate()).padStart(2, '0')}`;
                const date = new Date(date1);
                if (date.getMonth() !== month - 1) break;

                const attendance = attendanceResults.find(a => {
                    const attDate = new Date(a.attendance_date);
                    return attDate.getDate() === dayNo && attDate.getMonth() === month - 1;
                });
                const isHoliday = holidays.has(date.toISOString().split('T')[0]);
                // console.log(holidays);
                // console.log(date);
                // console.log(isHoliday);
                let status = '';
                if (isHoliday) {
                    status = 'H';
                } else if (attendance) {
                    if (attendance.status == 'Present' || attendance.status == 'present') {
                        status = 'P';
                        const checkInTime = new Date(`1970-01-01T${attendance.check_in_time}Z`);
                        const checkOutTime = attendance.check_out_time ? new Date(`1970-01-01T${attendance.check_out_time}Z`) : null;
                        if (checkInTime && checkOutTime) {
                            const workDuration = (checkOutTime - checkInTime) / (1000 * 60);
                            if (workDuration < 510) {
                                status = '-WD';
                            }
                        }
                        if (!attendance.check_out_time) {
                            status = 'NCO';
                        }
                    } else if (attendance.status == 'half-day' || attendance.status == 'Half-Day') {
                        status = 'HF';
                    } else if (attendance.status == 'absent' || attendance.status == 'Absent') {
                        status = 'AP';
                    }
                } else {
                    status = 'A';
                }
                monthlyAttendanceLogs.push({
                    day_no: dayNo,
                    status: status,
                    date: date,
                    // status: isHoliday ? 'H' : (attendance ? (attendance.status === 'Present' ? 'P' : 'A') : 'A'),
                    // status: isHoliday ? 'H' : (attendance ? attendance.status=='Present'?'P' : 'A'),
                    in_time: attendance ? attendance.check_in_time : '',
                    out_time: attendance ? attendance.check_out_time : ''
                });
            }
            // Build the employee-specific response
            employeesAttendanceData.push({
                emp_details: {
                    name: employee.first_name,
                    userId: employee.employee_id,
                    Id: employee.id
                },
                monthly_attendance_logs: monthlyAttendanceLogs
            });
        }
        // Send the response with all employee data
        res.json({
            status: true,
             employees: employeesAttendanceData 
            });
    } catch (err) {
        console.error('Error occurred:', err);
        res.status(500).json({ message: 'An error occurred while fetching attendance data', error: err.message });
    }
});


// Export the router
module.exports = router;











// router.get('/api/attendance', async (req, res) => {
//     const { data } = req.query;
//     const employeeId = '1,2,3';
//     let year = null;
//     let month = null;

//     if (data) {
//         year = parseInt(data['Year'], 10) || null;
//         month = parseInt(data['Month'], 10) || null;
//     }

//     if (!employeeId || !month || !year || month < 1 || month > 12 || year < 1900 || year > new Date().getFullYear()) {
//         return res.status(400).json({ message: 'Invalid or missing parameters' });
//     }
//     try {
//         const [empResults] = await db.promise().query('SELECT id, first_name, employee_id FROM employees WHERE id = ?', [employeeId]);
//         if (empResults.length === 0) {
//             return res.status(404).json({ message: 'Employee not found' });
//         }
//         const employee = empResults[0];
//         const [attendanceResults] = await db.promise().query(`
//             SELECT status, check_in_time, check_out_time, attendance_date
//             FROM attendance
//             WHERE employee_id = ? AND YEAR(attendance_date) = ? AND MONTH(attendance_date) = ?`,
//             [employeeId, year, month]
//         );

//         const [holidayResults] = await db.promise().query(`
//             SELECT date
//             FROM holiday
//             WHERE status = 1 AND YEAR(date) = ? AND MONTH(date) = ?`,
//             [year, month]
//         );

//         const holidays = new Set(holidayResults.map(holiday => new Date(holiday.date).toISOString().split('T')[0]));

//         const monthlyAttendanceLogs = [];
//         for (let dayNo = 1; dayNo <= 31; dayNo++) {
//             const date = new Date(year, month - 1, dayNo);
//             if (date.getMonth() !== month - 1) break;

//             const attendance = attendanceResults.find(a => {
//                 const attDate = new Date(a.attendance_date);
//                 return attDate.getDate() === dayNo && attDate.getMonth() === month - 1;
//             });
//             const isHoliday = holidays.has(date.toISOString().split('T')[0]);
//             monthlyAttendanceLogs.push({
//                 day_no: dayNo,
//                 status: isHoliday ? 'H' : (attendance ? attendance.status : 'A'),
//                 in_time: attendance ? attendance.check_in_time : '',
//                 out_time: attendance ? attendance.check_out_time : ''
//             });
//         }

//         // Build the response object
//         const response = {
//             emp_details: {
//                 name: employee.first_name,
//                 userId: employee.employee_id,
//                 Id: employee.id
//             },
//             monthly_attendance_logs: monthlyAttendanceLogs
//         };
//         // Send the response
//         res.json(response);

//     } catch (err) {
//         console.error('Error occurred:', err);
//         res.status(500).json({ message: 'An error occurred while fetching attendance data', error: err.message });
//     }
// });