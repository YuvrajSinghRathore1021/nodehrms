const express = require('express');
const router = express.Router();
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const cors = require('cors');
const db = require('../../DB/ConnectionSql');
router.use(cors());
const uploadsDir = path.join(__dirname, '../../uploads/logo/');

// Create uploads directory if it doesn't exist
if (!fs.existsSync(uploadsDir)) {
    fs.mkdirSync(uploadsDir);
}
// Configure multer storage
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, uploadsDir);
    },
    filename: (req, file, cb) => {
        cb(null, Date.now() + path.extname(file.originalname));
    }
});

// File type filtering
const upload = multer({
    storage: storage,
    fileFilter: (req, file, cb) => {
        const filetypes = /jpeg|jpg|png|gif/;
        const extname = filetypes.test(path.extname(file.originalname).toLowerCase());
        const mimetype = filetypes.test(file.mimetype);
        if (mimetype && extname) {
            return cb(null, true);
        }
        cb(new Error(`Error: File upload only supports the following file types - ${filetypes}`));
    }
});


router.post('/api/UploadLogo', upload.single('logo'), async (req, res) => {
    const { userData } = req.body;
    let decodedUserData = null;
    if (userData) {
        try {
            const decodedString = Buffer.from(userData, 'base64').toString('utf-8');
            decodedUserData = JSON.parse(decodedString);
        } catch (error) {
            return res.status(400).json({ status: false, error: 'Invalid userData' });
        }
    }
    // Validate decoded userData
    if (!decodedUserData || !decodedUserData.company_id) {
        return res.status(400).json({ status: false, error: 'company ID is required' });
    }
    const newLogo = '/uploads/logo/'.req.file ? req.file.filename : null;
    db.query('SELECT logo FROM companies WHERE id = ?', [decodedUserData.company_id], (err, results) => {
        if (err) {
            console.error(err);
            return res.status(500).json({
                status: false,
                message: 'Failed to fetch current logo.',
                error: err.message
            });
        }
        if (results.length === 0) {
            return res.status(404).json({ status: false, message: 'Company not found.' });
        }
        const currentLogo = results[0].logo;
        const logoToUse = newLogo || currentLogo;
        db.query(
            'UPDATE companies SET  logo = ? WHERE id = ?',
            [logoToUse, decodedUserData.company_id],
            (err) => {
                if (err) {
                    console.error(err);
                    return res.status(500).json({
                        status: false,
                        message: 'Failed to edit company.',
                        error: err.message
                    });
                }
                return res.status(200).json({
                    status: true,
                    message: 'Company edited successfully.'
                });
            }
        );
    });
});






// Export the router
module.exports = router;
